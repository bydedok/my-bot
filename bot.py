import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8205652665:AAGqfXfMPI0FmJ-ya7Gdl33xAb2TzcW8QUg"
ADMIN_CHAT_ID = -4870640506

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
unread_messages = {}

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –µ–≥–æ —É–≤–∏–¥–∏—Ç —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç.")

async def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    text = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id not in unread_messages:
        unread_messages[user_id] = []
    unread_messages[user_id].append(text)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    keyboard = [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–º—É —É—á–µ–Ω–∏–∫—É", callback_data=f"reply_{user_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.message.from_user.full_name} (ID: {user_id}):\n{text}",
        reply_markup=reply_markup
    )

async def reply_command(update: Update, context: CallbackContext):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    user_id = int(context.args[0])
    reply_text = " ".join(context.args[1:])

    try:
        await context.bot.send_message(chat_id=user_id, text=f"–û—Ç–≤–µ—Ç: {reply_text}")
        if user_id in unread_messages:
            unread_messages.pop(user_id)
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("reply_"):
        user_id = query.data.split("_")[1]
        await query.edit_message_text(text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /reply {user_id} <–≤–∞—à –æ—Ç–≤–µ—Ç>")

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reply", reply_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
