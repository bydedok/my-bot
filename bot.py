import json
import os
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# üîë –¢–í–û–ô –¢–û–ö–ï–ù –∏ ID –≥—Ä—É–ø–ø—ã
TOKEN = "8205652665:AAGqfXfMPI0FmJ-ya7Gdl33xAb2TzcW8QUg"
ADMIN_CHAT_ID = -4870640506

# üìÇ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
DATA_FILE = "pending.json"
pending_messages = {}
uid_counter = 0


# ======= –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ =======
def save_data():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—á–µ—Ä–µ–∑ .tmp)."""
    global pending_messages, uid_counter
    tmp_file = DATA_FILE + ".tmp"
    with open(tmp_file, "w", encoding="utf-8") as f:
        json.dump({"pending": pending_messages, "uid_counter": uid_counter}, f, ensure_ascii=False)
    os.replace(tmp_file, DATA_FILE)


def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    global pending_messages, uid_counter
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            pending_messages = data.get("pending", {})
            uid_counter = data.get("uid_counter", 0)


# ======= –ö–æ–º–∞–Ω–¥—ã =======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üìù –•–æ—á—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å!", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —à–∫–æ–ª—å–Ω—ã–π –±–æ—Ç-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—É —à–∫–æ–ª—ã:")


async def receive_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—á–µ–Ω–∏–∫–∞."""
    global uid_counter
    user = update.message.from_user
    text = update.message.text

    existing_uid = None
    for uid, msg in pending_messages.items():
        if msg["user_id"] == user.id:
            existing_uid = uid
            break

    if existing_uid:
        pending_messages[existing_uid]["texts"].append(text)
        uid = existing_uid
    else:
        uid_counter += 1
        pending_messages[str(uid_counter)] = {
            "user_id": user.id,
            "name": user.first_name,
            "texts": [text],
            "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }
        uid = str(uid_counter)

    save_data()
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    keyboard = [[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–º—É —É—á–µ–Ω–∏–∫—É", callback_data=f"reply_{uid}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    all_texts = "\n---\n".join(pending_messages[uid]["texts"])
    msg = (
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ (UID: {uid}) –æ—Ç {user.first_name} (ID: {user.id})\n"
        f"üïí {pending_messages[uid]['timestamp']}\n\n{all_texts}"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg, reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data.startswith("reply_"):
        uid = query.data.split("_")[1]
        if uid in pending_messages:
            await query.message.reply_text(
                f"‚úçÔ∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–∞–ø–∏—à–∏:\n`/reply {uid} —Ç–≤–æ–π —Ç–µ–∫—Å—Ç`",
                parse_mode="Markdown"
            )


async def reply_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç —É—á–µ–Ω–∏–∫—É."""
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /reply <UID> <—Ç–µ–∫—Å—Ç>")
        return

    uid = context.args[0]
    reply_text = " ".join(context.args[1:])

    if uid not in pending_messages:
        await update.message.reply_text("‚ö†Ô∏è UID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_id = pending_messages[uid]["user_id"]

    try:
        await context.bot.send_message(chat_id=user_id, text=f"üì¢ –û—Ç–≤–µ—Ç –æ—Ç –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞:\n\n{reply_text}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–µ–Ω–∏–∫—É.")
        del pending_messages[uid]
        save_data()
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not pending_messages:
        await update.message.reply_text("üéâ –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
    else:
        text = "üìã –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        for uid, msg in pending_messages.items():
            all_texts = "\n---\n".join(msg["texts"])
            text += (
                f"UID: {uid}\n"
                f"–û—Ç: {msg['name']} (ID: {msg['user_id']})\n"
                f"üïí {msg['timestamp']}\n"
                f"{all_texts}\n\n"
            )
        # —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        for i in range(0, len(text), 4000):
            await update.message.reply_text(text[i:i + 4000])


async def about_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë§ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç —à–∫–æ–ª—ã: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
        "üìö –ö–ª–∞—Å—Å: 10–ê\n"
        "‚ú® –•–æ—á—É —Å–¥–µ–ª–∞—Ç—å —à–∫–æ–ª—É –ª—É—á—à–µ!"
    )


# ======= –ó–∞–ø—É—Å–∫ =======
def main():
    load_data()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reply", reply_command))
    app.add_handler(CommandHandler("pending", pending_command))
    app.add_handler(MessageHandler(filters.Regex("^üìù –•–æ—á—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å!$"), ask_question))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ$"), receive_question))
    app.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ$"), about_me))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
